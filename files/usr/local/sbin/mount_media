#!/bin/bash
#
# Mounts media folders for Plex
#

# Script variables
export HOME=/etc/plex
MEDIA_CONF_DIR=/etc/plex/media.d

##
# Check common media config
##
function check_common {
    if [ "${mountPoint}" == "" ]; then
        echo "  ERROR: 'mountPoint' is not defined."
        echo
        return 100
    fi
    if [ "${encrypt}" == "1" ]; then
        if [ "${encfsMountPoint}" == "" ]; then
            echo "  ERROR: 'encfsMountPoint' is not defined."
            echo
            return 100
        fi
        if [ "${encfsXmlFile}" == "" ]; then
            echo "  ERROR: 'encfsXmlFile' is not defined."
            echo
            return 100
        fi
        if [ ! -f "${encfsXmlFile}" ]; then
            echo "  ERROR: encfs XML config file '${encfsXmlFile}' does not exist or is not readable."
            echo
            return 100
        fi 
        if [ "${encfsPassFile}" == "" ]; then
            echo "  ERROR: 'encfsPassFile' is not defined."
            echo
            return 100
        fi
        if [ ! -f "${encfsPassFile}" ]; then
            echo "  ERROR: encfs password file '${encfsPassFile}' does not exist or is not readable."
            echo
        fi
    fi
}

##
# Check local media config
##
function check_local {
    check_common
}

##
# Mount local media
##
function mount_local {
    if [ ! -d "${mountPoint}" ]; then
        echo "  > mkdir -p '${mountPoint}'"
        mkdir -p "${mountPoint}"
    fi
    if [ "${encrypt}" == "1" ]; then
        if [ ! -d "${encfsMountPoint}" ]; then
            echo "  > mkdir -p '${encfsMountPoint}'"
            mkdir -p "${encfsMountPoint}"
        fi
        echo "  > cat '${encfsPassFile}' | ENCFS6_CONFIG='${encfsXmlFile}' encfs -S '${encfsMountPoint}' '${mountPoint}'"
        cat "${encfsPassFile}" | ENCFS6_CONFIG="${encfsXmlFile}" encfs -S "${encfsMountPoint}" "${mountPoint}"
    fi
    echo "  -- Done"
    echo
}

##
# Check Amazon Cloud Drive media config
##
function check_acd {
    check_common
}

##
# Mount Amazon Cloud Drive media
##
function mount_acd {
    if [ ! -f ${HOME}/.cache/acd_cli/oauth_data ]; then
        echo "  ERROR: Amazon Cloud Drive auth data '${HOME}/.cache/acd_cli/oauth_data' is missing."
        echo
        return 100
    fi
    if [ ! -d "${mountPoint}" ]; then
        echo "  > mkdir -p '${mountPoint}'"
        mkdir -p "${mountPoint}"
    fi
   
    # Mount encrypted drive 
    if [ "${encrypt}" == "1" ]; then
        if [ ! -d "${encfsMountPoint}" ]; then
            echo "  > mkdir -p '${encfsMountPoint}'"
            mkdir -p "${encfsMountPoint}"
        fi
        echo "  > acd_cli mount --allow-other --nonempty '${encfsMountPoint}'"
        acd_cli mount --allow-other --nonempty "${encfsMountPoint}"
        echo "  > acd_cli sync"
        acd_cli sync

        if [ "${encfsSubdir}" != "" ]; then
            if [ ! -d "${encfsMountPoint}/${encfsSubdir}" ]; then
                echo "  > mkdir -p '${encfsMountPoint}/${encfsSubdir}'"
                while [ 1 ]; do
                    mkdir -p "${encfsMountPoint}/${encfsSubdir}"
                    if [ -d "${encfsMountPoint}/${encfsSubdir}" ]; then
                        break
                    fi
                    echo "  > Retrying mkdir..."
                    sleep 1
                done
            fi
            encfsMountPoint="${encfsMountPoint}/${encfsSubdir}"
        fi
        echo "  > cat '${encfsPassFile}' | ENCFS6_CONFIG='${encfsXmlFile}' encfs -S '${encfsMountPoint}' '${mountPoint}'"
        cat "${encfsPassFile}" | ENCFS6_CONFIG="${encfsXmlFile}" encfs -S "${encfsMountPoint}" "${mountPoint}"

    # Mount unencrypted drive
    else
        echo "  > acd_cli mount --allow-other --nonempty '${mountPoint}'"
        acd_cli mount --allow-other --nonempty "${mountPoint}"
        echo "  > acd_cli sync"
        acd_cli sync
    fi
    echo "  -- Done"
    echo
}

# Parse media configuration files
for c in $(find ${MEDIA_CONF_DIR} -name \*.conf); do
    . $c
    echo "Checking config: $c"
    if [ "${type}" == "local" ]; then
       check_local
    elif [ "${type}" == "acd" ]; then
       check_acd
    else
       echo "  ERROR: 'type' must be one of the following: local | acd"
       echo
       exit 100
    fi
    echo "Mounting media folder: $mountPath"
    eval "mount_${type}"
done

